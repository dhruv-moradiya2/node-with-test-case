name: Node.js CI with Jest

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout repository
      - name: Checkout code
        uses: actions/checkout@v5

      # 2. Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 22

      # 3. Install dependencies
      - name: Install dependencies
        run: npm install

      # 4. Run Jest tests with coverage
      # - name: Run Jest tests
      #   id: hello
      #   run: |
      #     npm test
          
      - name: check test 
        run: |
          echo "${{ secrets.DEV_ENV }}" > .env.production
          cat .env.production

      - name: check env value
        env:
          DEV_ENV: ${{ secrets.DEV_ENV }}
          NODE_ENV: production
        run: |
          echo "The value of DEV_ENV is: $DEV_ENV"
          echo "The value of NODE_ENV is: $NODE_ENV"

      - name: check json file
        run: |
          echo "${{ secrets.TEST_JSON }}" > test.json
          cat test.json

      # 5. Publish Jest JUnit report for dashboard
#       - name: Publish Jest test results
#         uses: dorny/test-reporter@v2
#         with:
#           name: Jest Tests
#           path: 'reports/junt/*.xml'
#           reporter: jest-junit
# #          token: ${{ github.token }}

#       # 6. Upload coverage report as artifact
#       - name: Upload coverage report
#         if: steps.hello.outcome == 'success'
#         uses: actions/upload-artifact@v4
#         with:
#           name: coverage-report
#           path: coverage
      
#       - name: remove coverage report
#         run: | 
#           rm -rf coverage
#           rm -rf reports

#   deploy:
#     needs: [ test ]
#     runs-on: ubuntu-latest
#     steps:
#       - name: checkout code
#         uses: actions/checkout@v5

      # - name: check code
      #   run: ls -la
